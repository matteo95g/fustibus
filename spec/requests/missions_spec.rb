 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "Missions", type: :request do
  let(:user) { create(:user) }

  before { sign_in user }
  after { sign_out user }

  describe "request list of club missions" do
    let(:count) { rand(1..5) }
    let(:club) { create(:club, users: [user]) }

    before { create_list(:mission, count, club: club) }
    
    it "returns all missions of a club" do
      get api_v1_club_missions_path({ club_id: club.id })
      
      expect(response).to be_successful
      expect(json_body['data'].size).to eq(count + 1)
    end
  end

  describe "POST /create" do
    let(:club) { create(:club, users: [user]) }
    
    context "with valid parameters" do
      it "creates a new Mission" do
        expect {
          post api_v1_club_missions_path({ club_id: club.id }), params: { description: Faker::Lorem.paragraph }
        }.to change(Mission, :count).by(2)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Mission" do
        expect {
          post api_v1_club_missions_path({ club_id: club.id }), params: { }
        }.to change(Mission, :count).by(1)
      end
    end
  end

  describe "PATCH /update" do
    let(:club) { create(:club, users: [user]) }
    let(:new_description) { Faker::Lorem.paragraph }

    context "with valid parameters" do
      let(:mission) { create(:mission) }

      it "updates the requested mission" do
        patch api_v1_club_mission_path({ club_id: club.id, id: mission.id }), params: { description: new_description }
        mission.reload
        expect(json_body['data']['attributes']['description']).to eq(new_description)
      end
    end
  end

  describe "DELETE /destroy" do
    let(:club) { create(:club, users: [user]) }
    let(:mission) { create(:mission) }

    it "destroys the requested mission" do
      delete api_v1_club_mission_path({ club_id: club.id, id: mission.id })

      expect(response).to be_successful
      expect(club.missions.count).to eq(1)
    end
  end
end
